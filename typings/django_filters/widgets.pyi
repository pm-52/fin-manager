"""
This type stub file was generated by pyright.
"""

from django import forms

class LinkWidget(forms.Widget):
    def __init__(self, attrs=..., choices=...) -> None:
        ...
    
    def value_from_datadict(self, data, files, name): # -> Any:
        ...
    
    def render(self, name, value, attrs=..., choices=..., renderer=...): # -> SafeText:
        ...
    
    def render_options(self, choices, selected_choices, name): # -> str:
        ...
    
    def render_option(self, name, selected_choices, option_value, option_label): # -> str:
        ...
    
    def option_string(self): # -> Literal['<li><a%(attrs)s href="?%(query_string)s">%(label)sâ€¦']:
        ...
    


class SuffixedMultiWidget(forms.MultiWidget):
    """
    A MultiWidget that allows u"""
    suffixes = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def suffixed(self, name, suffix): # -> str:
        ...
    
    def get_context(self, name, value, attrs): # -> Dict[str, Any]:
        ...
    
    def value_from_datadict(self, data, files, name): # -> list[Any]:
        ...
    
    def value_omitted_from_data(self, data, files, name): # -> bool:
        ...
    
    def replace_name(self, output, index): # -> str | Any:
        ...
    
    def decompress(self, value): # -> list[None] | Any:
        ...
    


class RangeWidget(SuffixedMultiWidget):
    template_name = ...
    suffixes = ...
    def __init__(self, attrs=...) -> None:
        ...
    
    def decompress(self, value): # -> list[Unknown] | list[None]:
        ...
    


class DateRangeWidget(RangeWidget):
    suffixes = ...


class LookupChoiceWidget(SuffixedMultiWidget):
    suffixes = ...
    def decompress(self, value): # -> list[None]:
        ...
    


class BooleanWidget(forms.Select):
    """Convert true/false values into t"""
    def __init__(self, attrs=...) -> None:
        ...
    
    def render(self, name, value, attrs=..., renderer=...): # -> SafeText:
        ...
    
    def value_from_datadict(self, data, files, name): # -> bool | None:
        ...
    


class BaseCSVWidget(forms.Widget):
    surrogate = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def value_from_datadict(self, data, files, name): # -> Any | list[Unknown] | None:
        ...
    
    def render(self, name, value, attrs=..., renderer=...): # -> SafeText:
        ...
    


class CSVWidget(BaseCSVWidget, forms.TextInput):
    def __init__(self, *args, attrs=..., **kwargs) -> None:
        ...
    


class QueryArrayWidget(BaseCSVWidget, forms.TextInput):
    """
    Enables request query array"""
    def value_from_datadict(self, data, files, name): # -> list[Unknown]:
        ...
    


