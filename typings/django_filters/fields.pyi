"""
This type stub file was generated by pyright.
"""

from collections import namedtuple
from django import forms
from .widgets import BaseCSVWidget, CSVWidget, DateRangeWidget, RangeWidget

class RangeField(forms.MultiValueField):
    widget = RangeWidget
    def __init__(self, fields=..., *args, **kwargs) -> None:
        ...
    
    def compress(self, data_list): # -> slice | None:
        ...
    


class DateRangeField(RangeField):
    widget = DateRangeWidget
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def compress(self, data_list): # -> slice | None:
        ...
    


class DateTimeRangeField(RangeField):
    widget = DateRangeWidget
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IsoDateTimeRangeField(RangeField):
    widget = DateRangeWidget
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TimeRangeField(RangeField):
    widget = DateRangeWidget
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Lookup(namedtuple('Lookup', ('value', 'lookup_expr'))):
    def __new__(cls, value, lookup_expr): # -> Self@Lookup:
        ...
    


class LookupChoiceField(forms.MultiValueField):
    default_error_messages = ...
    def __init__(self, field, lookup_choices, *args, **kwargs) -> None:
        ...
    
    def compress(self, data_list): # -> Lookup | None:
        ...
    


class IsoDateTimeField(forms.DateTimeField):
    """
    Supports 'iso-8601' date fo"""
    ISO_8601 = ...
    input_formats = ...
    def strptime(self, value, format): # -> datetime | Any:
        ...
    


class BaseCSVField(forms.Field):
    """
    Base field for validating C"""
    base_widget_class = BaseCSVWidget
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def clean(self, value): # -> list[Any] | None:
        ...
    


class BaseRangeField(BaseCSVField):
    widget = CSVWidget
    default_error_messages = ...
    def clean(self, value): # -> list[Any] | None:
        ...
    


class ChoiceIterator:
    def __init__(self, field, choices) -> None:
        ...
    
    def __iter__(self): # -> Generator[tuple[Literal[''], Unknown] | tuple[Unknown, Unknown] | Unknown, None, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    


class ModelChoiceIterator(forms.models.ModelChoiceIterator):
    def __iter__(self): # -> Generator[Tuple[int | str, str] | tuple[Unknown, Unknown], None, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    


class ChoiceIteratorMixin:
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    choices = ...


class ChoiceField(ChoiceIteratorMixin, forms.ChoiceField):
    iterator = ChoiceIterator
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MultipleChoiceField(ChoiceIteratorMixin, forms.MultipleChoiceField):
    iterator = ChoiceIterator
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ModelChoiceField(ChoiceIteratorMixin, forms.ModelChoiceField):
    iterator = ...
    def to_python(self, value): # -> Any | None:
        ...
    


class ModelMultipleChoiceField(ChoiceIteratorMixin, forms.ModelMultipleChoiceField):
    iterator = ...


