"""
This type stub file was generated by pyright.
"""

def remote_queryset(field):
    """
    Get the queryset for the ot"""
    ...

class FilterSetOptions:
    def __init__(self, options=...) -> None: ...

class FilterSetMetaclass(type):
    def __new__(cls, name, bases, attrs): ...
    @classmethod
    def get_declared_filters(cls, bases, attrs): ...

FILTER_FOR_DBFIELD_DEFAULTS = ...

class BaseFilterSet:
    FILTER_DEFAULTS = ...
    def __init__(self, data=..., queryset=..., *, request=..., prefix=...) -> None: ...
    def is_valid(self):  # -> Literal[False]:
        """
        Return True if the unde"""
        ...
    @property
    def errors(self):
        """
        Return an ErrorDict for"""
        ...
    def filter_queryset(self, queryset):  # -> QuerySet[Unknown]:
        """
        Filter the queryset wit"""
        ...
    @property
    def qs(self): ...
    def get_form_class(self):  # -> Type[_]:
        """
        Returns a django Form s"""
        ...
    @property
    def form(self): ...
    @classmethod
    def get_fields(cls):  # -> OrderedDict[Unknown, Unknown]:
        """
        Resolve the 'fields' ar"""
        ...
    @classmethod
    def get_filter_name(cls, field_name, lookup_expr):  # -> str:
        """
        Combine a field name an"""
        ...
    @classmethod
    def get_filters(cls):  # -> OrderedDict[Unknown, Unknown]:
        """
        Get all filters for the"""
        ...
    @classmethod
    def filter_for_field(cls, field, field_name, lookup_expr=...): ...
    @classmethod
    def filter_for_lookup(cls, field, lookup_type): ...

class FilterSet(BaseFilterSet, metaclass=FilterSetMetaclass): ...

def filterset_factory(model, fields=...): ...
